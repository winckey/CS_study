class BabylonSound{constructor(e){const{scene:s,data:t}=e;this.id=t.id,this.name=t.defaultName,this.scene=s,this.sound=null,this.execQueue=[],this.isReady=!1}static create(e){const s=new BabylonSound(e),{scene:t,data:o}=e,n=t.addBinaryFileTask("soundTask",o.path);n.onSuccess=e=>{const n=new BABYLON.Sound(o.defaultName,e.data,t.scene,(()=>{s.sound=n,s.onReadyToPlay(),t.addSound(s)}))},n.onError=(e,o,n)=>{console.error(111,"soundTask error",o,n),t.addSound(s)}}dispose(){this.sound&&this.sound.dispose()}onReadyToPlay(){this.isReady=!0;const e=this.execQueue.length;if(e>0)for(let s=0;s<e;s++)this.execQueue.pop()()}isReady(){return this.isReady}execOnReady(e){this.isReady?e():this.execQueue.push(e)}isPlaying(){return!!this.sound&&this.sound.isPlaying}play(){this.execOnReady((()=>this.sound.play()))}restart(){this.execOnReady((()=>{this.stop(),this.play()}))}resume(){this.execOnReady((()=>{this.isPlaying()||this.sound.play()}))}setLoop(e){this.execOnReady((()=>{this.sound.loop=e}))}stop(){this.execOnReady((()=>{this.sound.stop()}))}pause(){this.execOnReady((()=>{this.sound.pause()}))}setVolume(e){this.execOnReady((()=>{let s=e;s<0?s=0:s>1&&(s=1),this.sound.setVolume(s)}))}getVolume(){return this.sound?this.sound.getVolume():0}addVolume(e){this.setVolume(this.getVolume()+e)}}window.BabylonSound=BabylonSound;