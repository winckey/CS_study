협업하는 개발자란?
: 제가 생각하는 협업은 한사람의 모든프로젝트의 모든 과정을 해결할수는 없다고 생각합니다
각자 맡은 서비스를 해결하고 설계 함에 있어 끊임없이 소통하고 일정을 공유하고 
문서화를 토대로 정확한 서비스를 서로에게 제공해줄수 있는 능력이 중요하다고 생각합니다.

어떻게?
:진행상황 공유를 위해 데일리스크럼으로 이슈를 공유하고 노션에 기록하며 진행상황을 jira
로 관리하며 개발에서의 협업의 중요성 또한 진행하며 배울수 있었습니다.
또한 프론트엔드와 백엔드팀으로 구분되어 작업을 하면서 백엔드 편의를 위해
 response DTO를 중복사용을 했던 경험이 있습니다. 
이후 프론트엔드와 소통하며 전달값으로 사용되지 않는 값들이 있는거 같다는 질문을 받았습니다.
 이를 통해 api 문서화의 중요성을 알고 swagger를 통해 DTO들을 세분화하고 문서화 
하여 소통을 원활하게 진행할수 있도록 하였습니다. 


문서화는 어떻게 하였나요?
: 노션과 문서프로그램들을 이용해 서면으로 기록하고 실제 구현에 앞써 swagger를 통해
api들을 문서화 하여 다른팀원들이 이용에 용이할수있도록 하였습니다.


문제가 생겼을때 해결방법
: 소통의 문제가 생겼을때는 가능하면 상대방의 의견을 수용하되 팀이 나아가고자 하는 방향
은 유지하려고 하는 편입니다. 또한 개발 측면에서 문제가 생겼을때는 문서화 한것을 기획시 
기준으로 해결하려 합니다. 저의 경험으로 주유소 프로젝트 당시 알람기능을 프로젝트
개발중 추가하게되어 일정문제가 있어 회의하던중 데일리 스크럼과 JIRA의 팀원 진행도를
파악하여 업무를 재분배 하였습니다.

MSA 구조를 선택한 이유?
: 확장성과 유동적인 상황에 대처할수 있도록 구현하기 위해 선택하였습니다. 이를 통해
Scale - out이 매우 용이 하였고 저희팀이 배포를 함에 있어 편의를 많이 느꼈습니다.
추가적으로 아쉬움도 있었는데 msa를 구조를 사용하게 되면서 기능에 비해 프로젝트 볼륨이
많이 커지면서 오히려 생산속도에서 비효율적임을 느낄수 있었습니다. 서비스간에 데이터베이스
조회를 위한 추가 통신또한 필요했고 팀원들간에도 더 많은 소통을 요구하였습니다.
그럼에도 msa구조는 it기업이 프로젝트를 확장하기위해서 큰 도움이 되는 구조라 생각합니다.

webRtc?:
webRtc서버를 통한 p2p 통신으로 서버에 사용자들의 채널과 ip주소를 기록하고 사용자들은
서버없이 서로 통신할수 있도록 도와줍니다.
저희는 openvidu를 이용하여 openvidu도커라이징 하여 사용하였습니다.

프레임워크란?
:어플리케이션 개발에 바탕이 되는 템플릿과 같은 역활을 하는 클래스 인터페이스의 집합이며 이를통해
여러사람의 협업을 잘할수 있도록 도와준다고 생각합니다.




REST란 Representational State Transfer의 약자로 자원을 이름으로 구분하여 
해당 자원의 상태를 주고 받는 것을 말합니다.
HTTP URI를 통해 자원을 명시하고 
HTTP Method를 통해 해당 자원에 대한 상태를 주고 받는 방식을 말합니다.


데요 쓰지말기!
콜백으로 전달가능 