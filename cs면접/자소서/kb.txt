동기
"멈추지않고 발전하는 기업"

저는 KB국민은행을 금융 플랫폼을 주도하는 기업으로의 성장에 기여하고 싶습니다. 저는 항상 유연한 기술 발전과 기술을 통한 서비스로 고객에게 신뢰 받는 기업에서 일하기를 희망해왔습니다. 그중 국내 1위 자산규모, 'KB원클라우드' 혁신을 위한 기술도입 , 빠른 변화에 대처하기 위한 애자일방법 적극 도입등 앞으로 발전하는 금융권에서 가장많은 데이터를 보유하고 미래를 위한 투자와 성장 가치가 있는 KB국민은행에 지원하게 되었습니다.

저는 입사하여 '코어뱅킹 서비스' 개발에 참여 하고싶습니다. 또한 KB국민은행의 핵심 서비스 개발자로서 시스템을 개발 하고 실시간 서비스들의 데이터를 관리하며 유연한 서비스 확장에 대응 할 수 있는 능력을 갖춘 일원일 될 것입니다. 학부 부터 SSAFY에 이르기까지 프로젝트를 개발하는데 있어 4가지 팀프로젝를 통해 소통능력을 길렀으며 항상 scale out에 대해 고민하고 MSA방식을 채택하여 프로젝트를 설계 Dokcer 및 AWS를 이용하여 팀프로젝트를 배포 하였습니다. 저의 이러한 경험을 바탕으로 KB국민은행의 코어뱅킹서비스 개발과 클라우드전환을 통한 유연한 서비스 확장과 미래 혁신을 주도하는 개발자로써 KB국민은행과 함께 성장하고 싶습니다.



협업경험
."기록과 소통"

저는 SSAFY프로젝트 '주유소'를 통해 협업경험과 팀장으로써 아래 2가지 소통문제를 해결하였습니다.
첫째 , 프론트엔드와의 소통에서 api 문서화를 수기로 작성하여 api추가와 변동시 문서의 최신화 문제로 협업 및 소통에 어려움이 있었습니다. 팀장으로써 이를 해결하고자 spring이 지원하는 swagger를 이용하여  모든 api및 dto의 문서화를 자동화 하였습니다. 이를 통해 프론트엔드와의 구두로 소통하는 부분이 많이 줄어 들고 문서로 대화하며 프로젝트의 생산성 향상을 경험했습니다.

둘째 , 프로젝트를 진행하며 알림기능의 추가에대해 논의를 하였습니다. 짧은 일정중 갑작스러운 기능추가는 부담이되어 인원 배치에 대해 고민하였습니다.  하지만 저희는 매일매일 데일리 스크럼을 통해 서로의 진행상황을 공유하고 이를 Notion을 이용하여 기록하였고 이를 이용하여 채팅 알람 기능을 추가하고자 하였을 때 기록한 일정을 바탕으로 후반작업에 여유있는 팀원의 일정을 조율하여 알람기능을 구현했으며 해당프로젝트를 우수상을 받으면서 마무리 할수 있었습니다. 이후 프로젝트 또한  jira를 통한 일정 관리 및 기록을 통해 다른 프로젝트들 또한 기록을 바탕으로 수행하여 마무리 하였습니다. 
해당프로젝트를 통해 프로젝트를위한 팀원들과 꾸준한 소통, 소통을 통한 기록 , 기록을 통한 약속과 협업의 중요성을 배웠습니다.

어려운상황 주도적 해결
"멈추지 않고 성장하는 개발자"

저는 꾸준한 성장을 위해 지난 7개월간 1일 1 깃을 실천하였습니다. SSAFY프로젝트를 진행하며 첫프로젝트 '주유소'를 마무리 후 단순 CRUD개발에 개발자로서의 한계와 변해가는 개발문화와 IT 트렌드 , 개발자로서 성장하기 위하여 더 깊은 수준의 이론을 따라갈 필요성을 느꼈습니다. 이를 극복하기 위하여 Dokcer , aws ,TDD, OOP, spring, 애자일, 알고리즘 등을 학습하기로 목표하고 기록하기위하여 깃허브를 활용 하였습니다.
이를 통해 지금까지 5, 6명에서 팀으로 진행한 3가지 프로젝트 학습경험등을 매일 기록하였으며 현재도 스터디를 통해 java GC에 관해 공부하며 블로그 및 깃허브에 기록을 남기는 중이며 꾸준한 습관을 통해 어떤 개발, 프로젝트, 학습이 되어도 지속해서 할 수 있는 능력을 길렀습니다.

깃허브 : https://github.com/winckey


개발 경험 
[주유소 프로젝트]
해당 프로젝트는 진행도중 벡엔드 에러 발생시 팀원간 서로다른 에러 처리로 인해 프론트와의 소통이 문제 발생하였습니다.
팀장으로서 이를 해결하고자 에러 핸들링을 고려 하여 코드를 구현 하였습니다. 효율적인 에러관리와 중복코드를 막고 팀원간 통일된 에러처리를 위해 Custom Exception을 만들어 Global로 관리 하였습니다. 이를 통해 모든 에러처리를 GlobalExceptionHandle에 위임하고 Error Code를 정의하여 예외처리시 code만으로 에러를 요청하며 프론트와의 소통 또한 더욱 편리 해졌습니다.

채팅기능 구현을 위하여 기존의 주기적인 호출을 통한 폴링 방식보다는 TCP 연결을 통한 WebSocket을 이용하기로 하였으며 trade off를 고려하여 스프링에서 지원하는 stomp를 이용하여습니다. 각 채팅 방 별로 방정보를 DB에 저장하고 엔드 포인트를 부여하여 WebSocket을 통해 실시간 채팅이 가능하도록 구현 하였습니다.

[모여봐요우리동네]
이전 Monolithic Architecture프로젝트의 방식에 협업 중 코드수정에 따라 서비스가 다름에도 수정후 배포로 인해 서비스의 중단과 프론트와의 소통에서 불편함을 느꼈고 이를 해결하고 추가로 원활한 scale out 과 기능추가의 유연성을 위해 MSA 구조로 설계하였으며 서비스 별 Docker 와 데이터베이스를 가지도록 구현되었습니다.  이를 통해 백 엔드 통신에서도 서로  다른 서비스의 API를 호출 함으로 서비스 분리를 느낄 수 있었습니다.

주문 , 채팅 서비스는 주문마감이후 채팅방 생성으로 동작합니다. 서비스 분리로인해 서비스간 통신이 필요했고 이를 Fegin Clinet를 이용하여 동기로 처리하려 하였으나 주문마감이후 채팅방생성시 주문서비스에서 응답을 기다릴 필요성이 없어 이를 해결하고자 하였습니다. 
이를 위해 비동기 통신 방법중 하나인 Mseeage Queue방식을 사용하고자 하였고 여러 솔루션중 다수인원에게 메세지 전달을 위해 Kafka를 이용하기로 하였습니다. Kafka를 개별 Docker로 등로하여 서비스별 통신에 이용하였으며 이를 통해 주문마감후 채팅방 생성을 응답을 기다리지 않고 진행하는 방식으로 구현 하였습니다.

저희 Kafka와 MSA에 대한 경험은 미래 'KB원클라우드' 시스템전환에 빠르게 적응하고 에러핸들링은 서비스 운영개발 문제 발생시 스스로 문제를 찾고 주도적으로 해결 할수 있도록 해줄 것입니다. 
