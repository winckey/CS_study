“비스트는 쿠버네티스, NoSQL, 반응형 웹 등 최신 IT 기술이 적용된 사용자 친화적 솔루션

출처 : 디지털투데이 (DigitalToday)(http://www.digitaltoday.co.kr)

‘소보 플러스+’는 데이터 기반의 금융소비자보호 혁신에 중점을 둔 업계 최초의 소비자보호 디지털 플랫폼으로, ▲ 소비자보호 핵심 데이터 시각화 ▲ 내부통제 인프라 구축 ▲ 내부직원 소통 활성화 ▲ AI를




API Gateway의 장점
클라이언트의 요청을 일괄적으로 처리
전체 시스템의 부하를 분산 시키는 로드 밸런서의 역할
동일한 요청에 대한 불필요한 반복 작업을 줄일 수 있는 캐싱
시스템 상을 오고가는 요청과 응답에 대한 모니터링
시스템 내부에 아키텍처를 숨길 수 있음


단점
API Gateway의 Scale-out 적용이 유연하게 일어나지 않을 경우, API Gateway가 병목 지점이 되어 어플리케이션의 성능 저하가 일어날 수 있습니다.
API Gaeway라는 추가적인 계층이 만들어지는 것이기 때문에, 그만큼 네트워크 latency가 증가하게 됩니다.

"자발적인 학습을 통해 소화하는 개발자"

저는 kt ds 개발자로써 끊임 없이 성장하는 개발자 입니다. IT 서비스 전문 기업 kt ds의 SW개발자로써 협업 , 도메인 지식 , 리더쉽등 다양한 역량이 필요 하겠지만 kt ds의 다양한 서비스 및 'AICentro DL Studio' , 'API 게이트웨이 비스트 ' ,  'Cloud Infra'와 같은 새로운 기술 도입에 적응 하기 위해서는 '위하는 기업문화'와 같이 자발적인 학습을 통해 빠른변화에 적응하는 능력이 가장 중요하다 생각합니다. 

저는 꾸준한 성장을 위해 지난 7개월간 1일 1 깃을 실천하였습니다. SSAFY프로젝트를 진행하며 단순 CRUD개발에 개발자로써의 한계와 부족함을 느꼈고 이를 극복하기 위하여 Dokcer , aws ,TDD, OOP, spring, 알고리즘 등을 학습하며 기록하기위하여 깃허브를 활용 하였습니다.
이를 통해 지금까지 5, 6명에서 팀으로 진행한 3가지 프로젝트 학습경험등을 꾸준히 기록하였으며 현재도 스터디를 통해 java GC에 관해 공부하며 블로그 및 깃허브에 기록을 남기는 중이며 꾸준한 습관을 통해 어떤 개발, 프로젝트, 학습이 되어도 지속해서 할 수 있는 능력을 길렀습니다.
저의 경험은 kt ds의 기업 문화의 적응과 kt ds의IT Transformation Leader로서 성장을 주도하는 개발자로 만드는 자산이 되어 줄것입니다. 

"불편함을 통한 새로운 방식"

저는 SSAFY의 '모여봐요우리동네프로젝트' 에선 이전 Monolithic Architecture프로젝트의 방식에 협업 중 코드수정에 따라 서비스가 다름에도 수정후 배포로 인해 서비스의 중단과 프론트와의 소통에 불편함을 느꼈고 해당 문제와 추가로 원활한 scale out 과 기능추가의 유연성을 위해 MSA 구조로 설계하였습니다.
초기 기술의 난이도와 짧은 시간으로 인해 기능 개발과 서비스간 api 호출 테스트에 많은 시간을 필요로 하여 팀원모두 이전 프로젝트보다 많은 시간을 할애 하여야 했습니다. 이로인해 프론트엔드에 비해 백엔드 개발 진도가 뒤쳐지게 되었습니다. 저는 문제 해결하기 위해 혼자 지속적으로 풀수없는 문제를 풀기 보단 보단 실무에있는 선배 에게 직접 상담하며 자료 조사하였고 얻은 레퍼런스와 경험을 팀원들과 공유하여 프로젝트를 끝까지 마무리 하였습니다. 
프로젝트를 진행후 서비스간 더 분명한 자율성과 책임 분리를 느낄수 있었으며 가장 해결하고 싶었던 문제인 서비스 단위의 독립적 배포문제를 해결 할수 있었습니다. 또한 새로운 기술 도입의 중요성과 기술 도입시 팀의 환경과 자원을 보고 트레이드 오프를 고려한 일정과 기능개발 계획의 중요성을 배웠습니다.
저의 경험은 입사 후 새로운 프로젝트와 만나더라도 두려워 하지않고 혁신을 주도하는 능력이 되어 줄 것입니다. 



"기록과 소통"

저는 SSAFY프로젝트 '주유소'를 통해 협업경험과 팀장으로써 아래 2가지 소통문제를 해결하였습니다.
첫째 , 프론트엔드와의 소통에서 api 문서화를 수기로 작성하여 api추가와 변동시 문서의 최신화 문제로 협업 및 소통에 어려움이 있었습니다. 팀장으로써 이를 해결하고자 spring이 지원하는 swagger를 이용하여  모든 api및 dto의 문서화를 자동화 하였습니다. 이를 통해 프론트엔드와의 구두로 소통하는 부분이 많이 줄어 들고 문서로 대화하며 프로젝트의 생산성 향상을 경험했습니다.

둘째 , 프로젝트를 진행하며 알림기능의 추가에대해 논의를 하였습니다. 짧은 일정중 갑작스러운 기능추가는 부담이되어 인원 배치에 대해 고민하였습니다.  하지만 저희는 매일매일 데일리 스크럼을 통해 서로의 진행상황을 공유하고 이를 Notion을 이용하여 기록하였고 이를 이용하여 채팅 알람 기능을 추가하고자 하였을 때 기록한 일정을 바탕으로 후반작업에 여유있는 팀원의 일정을 조율하여 알람기능을 구현했으며 해당프로젝트를 우수상을 받으면서 마무리 할수 있었습니다. 이후 프로젝트 또한  jira를 통한 일정 관리 및 기록을 통해 다른 프로젝트들 또한 기록을 바탕으로 수행하여 마무리 하였습니다. 
해당프로젝트를 통해 협업을 위해서는 팀원들과 꾸준한 소통, 소통을 통한 기록 , 기록을 통한 약속과 협업의 중요성을 배웠습니다.